// Type definitions for RxJsVisualizer
// Project: RxJsVisualizer
// Definitions by: Robert Grueneis <robert.grueneis@htl-grieskirchen.at>

import { Observable, Subject } from 'rxjs';

export interface RxJsVisualizerOptions {
  canvasId: string;
  logDivId?: string;
  headerWidth?: number;
  marginHorizontal?: number;
  marginVertical?: number;
  blockHeight?: number;
  shapeSize?: number;
  centerShapes?: boolean;
  autoExpandCanvasWidth?: boolean;
  font?: string;
  colors?: string[];
  maxPeriod?: number;
  tickPeriod?: number;
  symbolMap?: any;
  guidelineColor?: string;
  tickColor?: string;
  showTimeTicks?: boolean;
  addNavigationButtons?: boolean;
  maxLogLength?: number;
}

export interface DrawingSymbolOptions {
  text?: string;
  color?: string;
  shape?: string;
  imageUrl?: string;
  strokeOnly?: boolean;
}
export class DrawingSymbol {
  constructor(options: DrawingSymbolOptions);
}
// export namespace RxJsVisualizer {
export function init(options: RxJsVisualizerOptions): void;
export function createStreamFromArrayRandom<T>(array: T[], totalNr?: number, minDelay?: number, maxDelay?: number): Observable<T>;
export function createStreamFromArraySequence<T>(array: T[], minDelay?: number, maxDelay?: number): Observable<T>;
export function createStreamFromArrayOnClick<T>(array: T[], buttonIdProduce: string, buttonIdComplete: string, buttonIdError: string): Observable<T>;
export function createStreamFromSubjectOnClick<T>(subject: Subject<T>, buttonIdProduce: string, buttonIdComplete: string, buttonIdError: string): Observable<T>;
export function observerForLine(lineNr: number, header?: string, shouldIgnoreSymbols?: boolean, valueMapper?: (val: any) => any): (value: number) => void;
export function startVisualize(): void;
export function rnd(from: number, to: number): number;
export function prepareCanvas(headerNames: string[]): void;
export function writeToLine(lineNr: number, text: string): void;
export function useRandomSymbolsForNumbers(maxNr?: number): void;
// }

export function draw<T>(lineNr: number, header?: string, shouldIgnoreSymbols?: boolean, valueMapper?: (val: T) => any): <T>(source: Observable<T>) => Observable<T>;



