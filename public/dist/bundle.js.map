{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UEAA;UACA;UACA;UACA;UACA","sources":["webpack://src/./src/app.ts","webpack://src/webpack/before-startup","webpack://src/webpack/startup","webpack://src/webpack/after-startup"],"sourcesContent":["/// <reference path=\"drag-drop-interfaces.ts\" />\n/// <reference path=\"project-model.ts\" />\n\nnamespace App {\n\n    /**\n     * Project State Management\n     */\n\n    type Lintener<T> = (items: T[])=> void;\n\n    class State<T> {\n        protected listeners: Lintener<T>[] = [];\n\n        addListner(listenerFn: Lintener<T>) {\n            this.listeners.push(listenerFn);\n        }\n    }\n\n    /**\n     * Projects State Management\n     */\n\n    class ProjectState extends State<Project> {\n        private projects: Project[] = [];\n        private static instance: ProjectState;\n\n        private constructor() {\n            super();\n        }\n\n        static getInstance() {\n            if (this.instance) {\n                return this.instance;\n            }\n            this.instance = new ProjectState();\n            return this.instance;\n        }\n\n        addProject(title: string, description: string, manday: number) {\n            const newProject = new Project(\n                Math.random().toString(),\n                title,\n                description,\n                manday,\n                ProjectStatus.Active\n            );\n\n            this.projects.push(newProject);\n            this.updateListeners();\n        }\n        \n        moveProject(projectId: string, newStatus: ProjectStatus) {\n            const project = this.projects.find(prj => prj.id === projectId);\n            \n            if (project && project.status !== newStatus) {\n                project.status = newStatus;\n                this.updateListeners();\n            }\n        }\n        \n        private updateListeners() {\n            for (const listenerFn of this.listeners) {\n                listenerFn(this.projects.slice());\n            }\n        }\n    }\n\n    const projectState = ProjectState.getInstance();\n\n    /**\n     * Validation\n     */\n\n    interface Validatable {\n        value: string | number;\n        required?: boolean;\n        minLength?: number;\n        maxLength?: number;\n        min?: number;\n        max?: number;\n    }\n\n    function validate(validatableInput: Validatable) {\n        let isValid = true;\n\n        if (validatableInput.required) {\n            isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n        }\n\n        if (\n            validatableInput.minLength != null && \n            typeof validatableInput.value === 'string'\n        ) {\n            isValid = \n                isValid && validatableInput.value.length >= validatableInput.minLength;\n        }\n\n        if (\n            validatableInput.maxLength != null && \n            typeof validatableInput.value === 'string'\n        ) {\n            isValid = \n                isValid && validatableInput.value.length <= validatableInput.maxLength;\n        }\n\n        if (\n            validatableInput.min != null && \n            typeof validatableInput.value === 'number'\n        ) {\n            isValid = \n                isValid && validatableInput.value >= validatableInput.min;\n        }\n\n        if (\n            validatableInput.max != null && \n            typeof validatableInput.value === 'number'\n        ) {\n            isValid = \n                isValid && validatableInput.value <= validatableInput.max;\n        }\n\n        return isValid;\n    }\n\n    /**\n     * autobind decorator\n     */\n\n    function autobind(target: any, name: string, descriptor: PropertyDescriptor) {\n        const originalMethod = descriptor.value;\n        const adjDescriptor: PropertyDescriptor = {\n            configurable: true,\n            enumerable: false,\n            get() {\n                const boundFn = originalMethod.bind(this);\n                return boundFn;\n            }\n        }\n        return adjDescriptor;\n    }\n\n    /**\n     * Component Class\n     */\n\n    abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n        tempmateElement: HTMLTemplateElement;\n        hostElement: T;\n        element: U;\n\n        constructor(\n            tempmateId: string,\n            hostElementId: string,\n            insertAtStart: boolean,\n            newElementId?: string\n        ) {\n            this.tempmateElement = document.getElementById(tempmateId)! as HTMLTemplateElement;\n            this.hostElement = document.getElementById(hostElementId)! as T;\n\n            const importedNode = document.importNode(this.tempmateElement.content, true);\n            this.element = importedNode.firstElementChild as U;\n            if (newElementId) {\n                this.element.id = newElementId;\n            }\n\n            this.attach(insertAtStart);\n        }\n\n        abstract configure(): void;\n        abstract renderContent(): void;\n\n        private attach(insertAtStartBeginning: boolean) {\n            this.hostElement.insertAdjacentElement(\n                insertAtStartBeginning ? 'afterbegin' : 'beforeend',\n                this.element\n            );\n        }\n    }\n\n    /**\n     * ProjectItem Class\n     */\n\n    class ProjectItem extends Component<HTMLUListElement, HTMLLIElement>\n        implements Draggable {\n\n        private project: Project;\n\n        get manday() {\n            if (this.project.manday < 20) {\n                return this.project.manday.toString() + ' Man Day';\n            } else {\n                return (this.project.manday / 20).toString() + ' Man month';\n            }\n        }\n\n        constructor(hostId: string, project: Project) {\n            super('single-project', hostId, false, project.id);\n            this.project = project;\n\n            this.configure();\n\n            this.renderContent();\n        }\n\n        @autobind\n        dragStartHandler(event: DragEvent) {\n            event.dataTransfer!.setData('text/plain', this.project.id);\n            event.dataTransfer!.effectAllowed = 'move';\n        }\n\n        dragEndHandler(_: DragEvent) {\n            console.log('Drag End');\n        }\n\n        configure() {\n            this.element.addEventListener('dragstart', this.dragStartHandler);\n            this.element.addEventListener('dragend', this.dragEndHandler);\n        }\n\n        renderContent() {\n            this.element.querySelector('h2')!.textContent = this.project.title;\n            this.element.querySelector('h3')!.textContent = this.manday;\n            this.element.querySelector('p')!.textContent = this.project.description;\n        }\n    }\n\n    class ProjectList extends Component<HTMLDivElement, HTMLElement>\n        implements DragTarget {\n\n        assignedProjects: Project[];\n\n        constructor(private type: 'active' | 'finished') {\n            super('project-list', 'app', false, `${type}-projects`);\n            this.assignedProjects = [];\n\n            this.configure();\n            this.renderContent();\n        }\n\n        @autobind\n        dragOverHandler(event: DragEvent) {\n            if (event.dataTransfer && event.dataTransfer.types[0] === 'text/plain') {\n                event.preventDefault();\n\n                const listEl = this.element.querySelector('ul')!;\n                listEl.classList.add('droppable');\n            }\n        }\n\n        @autobind\n        dropHandler(event: DragEvent) {\n            const prjId = (event.dataTransfer!.getData('text/plain'));\n            projectState.moveProject(prjId, this.type === 'active' ? ProjectStatus.Active : ProjectStatus.Finished);\n        }\n\n        @autobind\n        dragLeaveHandler(_: DragEvent) {\n            const listEl = this.element.querySelector('ul')!;\n            listEl.classList.remove('droppable');\n        }\n\n        configure() {\n            this.element.addEventListener('dragover', this.dragOverHandler);\n            this.element.addEventListener('drop', this.dropHandler);\n            this.element.addEventListener('dragleave', this.dragLeaveHandler);\n\n            projectState.addListner((projects: Project[]) => {\n                const relevantProjects = projects.filter(prj => {\n                    if (this.type === 'active') {\n                        return prj.status === ProjectStatus.Active;\n                    }\n                    return prj.status === ProjectStatus.Finished;\n                });\n                this.assignedProjects = relevantProjects;\n                this.renderProjects();\n            });\n        }\n\n        renderContent() {\n            const listId = `${this.type}-projects-list`;\n            this.element.querySelector('ul')!.id = listId;\n            this.element.querySelector('h2')!.textContent = \n                this.type === 'active' ? 'Active Project' : 'Completed Project';\n        }\n\n        private renderProjects() {\n            const listEl = document.getElementById(`${this.type}-projects-list`)! as HTMLUListElement;\n\n            listEl.innerHTML = '';\n\n            for (const prjItem of this.assignedProjects) {\n                new ProjectItem(listEl.id, prjItem);\n            }\n        }\n    }\n\n    class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n        titleInputElement: HTMLInputElement;\n        descriptionInputElement: HTMLInputElement;\n        mandayInputElement: HTMLInputElement;\n\n        constructor() {\n            super('project-input', 'app', true, 'user-input');\n\n            this.titleInputElement = this.element.querySelector('#title') as HTMLInputElement;\n            this.descriptionInputElement = this.element.querySelector('#description') as HTMLInputElement;\n            this.mandayInputElement = this.element.querySelector('#manday') as HTMLInputElement;\n\n            this.configure();\n        }\n\n        configure() {\n            this.element.addEventListener('submit', this.submitHandler);\n        }\n\n        renderContent() {}\n\n        private getherUserInput(): [string, string, number] | void {\n\n            const enteredTitle = this.titleInputElement.value;\n            const enteredDescription = this.descriptionInputElement.value;\n            const enteredManday = this.mandayInputElement.value;\n\n            const titleValidatable: Validatable = {\n                value: enteredTitle,\n                required: true\n            };\n\n            const descriptionValidatable: Validatable = {\n                value: enteredDescription,\n                required: true,\n                minLength: 5\n            };\n\n            const mandayValidatable: Validatable = {\n                value: +enteredManday,\n                required: true,\n                min: 1,\n                max: 1000\n            };\n\n            if (\n                !validate(titleValidatable) || \n                !validate(descriptionValidatable) || \n                !validate(mandayValidatable)\n            ) {\n                alert('Incorrect inputs');\n                return;\n            } else {\n                return [enteredTitle, enteredDescription, +enteredManday];\n            }\n        }\n\n        private clearInputs() {\n            this.titleInputElement.value = '';\n            this.descriptionInputElement.value = '';\n            this.mandayInputElement.value = '';\n        }\n\n        @autobind\n        private submitHandler(event: Event) {\n            event.preventDefault();\n            const userInput = this.getherUserInput();\n\n            if (Array.isArray(userInput)) {\n                const [title, description, manday] = userInput ;\n                projectState.addProject(title, description, manday);\n                this.clearInputs();\n            }\n        }\n    }\n\n    new ProjectInput();\n    new ProjectList('active');\n    new ProjectList('finished');\n}\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/app.ts\"]();\n",""],"names":[],"sourceRoot":""}